diff --git a/src/base64Decode.js b/src/base64Decode.js
index 46a15327d..2ddf0af36 100644
--- a/src/base64Decode.js
+++ b/src/base64Decode.js
@@ -4,7 +4,6 @@
  * SPDX-License-Identifier: MIT
  */
 
-#if WASM2JS && 0 // TODO: Figure out a way to enable this kind of sharing.
 
 // Binaryen defines the following function if Wasm2JS is being used:
 //   function base64DecodeToExistingUint8Array(uint8Array, offset, b64);
@@ -13,13 +12,6 @@
 // is disabled atm.
 
 function base64Decode(b64) {
-#if ASSERTIONS
-  assert(b64.length % 4 == 0);
-#endif
-  return base64DecodeToExistingUint8Array(new Uint8Array(b64.length*3>>2), 0, b64);
-}
-
-#else
 
 // Precreate a reverse lookup table from chars "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" back to bytes to make decoding fast.
 for (var base64ReverseLookup = new Uint8Array(123/*'z'+1*/), i = 25; i >= 0; --i) {
@@ -36,16 +28,11 @@ base64ReverseLookup[47] = 63; // '/'
 // "Uint8Array.from(atob(b64), c => c.charCodeAt(0))" (TODO: perhaps use this form in -Oz builds?)
 /** @noinline */
 function base64Decode(b64) {
-#if ENVIRONMENT_MAY_BE_NODE
   if (typeof ENVIRONMENT_IS_NODE != 'undefined' && ENVIRONMENT_IS_NODE) {
     var buf = Buffer.from(b64, 'base64');
     return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
   }
-#endif
 
-#if ASSERTIONS
-  assert(b64.length % 4 == 0);
-#endif
   var b1, b2, i = 0, j = 0, bLength = b64.length, output = new Uint8Array((bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '='));
   for (; i < bLength; i += 4, j += 3) {
     b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
@@ -56,5 +43,4 @@ function base64Decode(b64) {
   }
   return output;
 }
-
-#endif // ~WASM2JS
+}
diff --git a/src/base64Utils.js b/src/base64Utils.js
index 9fea5f8df..972d7f30e 100644
--- a/src/base64Utils.js
+++ b/src/base64Utils.js
@@ -42,12 +42,12 @@ var decodeBase64 = typeof atob == 'function' ? atob : function (input) {
 // Converts a string of base64 into a byte array.
 // Throws error on invalid input.
 function intArrayFromBase64(s) {
-#if ENVIRONMENT_MAY_BE_NODE
+// #if ENVIRONMENT_MAY_BE_NODE
   if (typeof ENVIRONMENT_IS_NODE == 'boolean' && ENVIRONMENT_IS_NODE) {
     var buf = Buffer.from(s, 'base64');
     return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
   }
-#endif
+// #endif
 
   try {
     var decoded = decodeBase64(s);
